<?php
declare(strict_types=1);

namespace Daylog\Tests\Support\Helper;

/**
 * Test data builder for Entry in camelCase shape (Application-wide, except Storage).
 *
 * Scenarios:
 * - Use getOne() to produce a single DTO-like payload for validators and use-cases.
 * - Use getMany() to build N items by reusing getOne() (no duplication).
 */
final class EntryTestData
{
    /**
     * Build a single payload representing an Entry.
     *
     * The method generates a deterministic payload with explicit fields.
     * If $createdAt/$updatedAt are not provided, they are derived from $date (00:00:00).
     *
     * @param string      $title     Non-empty trimmed title (see BR-1/BR-3).
     * @param string      $body      Non-empty body within limits (see BR-2).
     * @param string      $date      Logical date YYYY-MM-DD (see BR-6).
     * @param string|null $createdAt Optional timestamp ISO-8601-like "YYYY-MM-DD HH:MM:SS".
     * @param string|null $updatedAt Optional timestamp ISO-8601-like "YYYY-MM-DD HH:MM:SS".
     * @return Array      DTO-like associative array in camelCase.
     */
    public static function getOne(
        string $title = 'Valid title',
        string $body = 'Valid body',
        string $date = '2025-08-13',
        ?string $createdAt = null,
        ?string $updatedAt = null
    ): array {
        $defaultTs = $date . ' 00:00:00';

        $finalCreatedAt = $createdAt ?? $defaultTs;
        $finalUpdatedAt = $updatedAt ?? $finalCreatedAt;

        $payload = [
            'title'     => $title,
            'body'      => $body,
            'date'      => $date,
            'createdAt' => $finalCreatedAt,
            'updatedAt' => $finalUpdatedAt,
        ];

        return $payload;
    }

    /**
     * Build many payloads by delegating to getOne() to avoid duplication.
     *
     * Dates are generated by adding $stepDays per subsequent item (deterministic).
     * Use this for pagination/query/sort tests where only shape matters.
     *
     * @param int    $count     Number of items to generate (>= 1).
     * @param int    $stepDays  Day step between consecutive dates (can be 0).
     * @param string $title     Base title for all items.
     * @param string $body      Base body for all items.
     * @param string $startDate Starting logical date YYYY-MM-DD.
     * @return array<int, Array>
     */
    public static function getMany(
        int $count,
        int $stepDays = 0,
        string $title = 'Valid title',
        string $body = 'Valid body',
        string $startDate = '2025-08-13'
    ): array {
        $items = [];

        for ($i = 0; $i < $count; $i++) {
            $dateBase = new \DateTimeImmutable($startDate);
            $dateShift = $dateBase->modify('+' . ($i * $stepDays) . ' days');
            $dateValue = $dateShift->format('Y-m-d');

            $one = self::getOne($title, $body, $dateValue, null, null);
            $items[] = $one;
        }

        return $items;
    }
}